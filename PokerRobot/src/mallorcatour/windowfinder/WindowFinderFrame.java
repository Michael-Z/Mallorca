/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * WindowFinderFrame.java
 *
 * Created on 20.12.2012, 16:18:43
 */
package mallorcatour.windowfinder;

import br.com.wagnerpaz.javahook.NativeKeyboardEvent;
import br.com.wagnerpaz.javahook.NativeKeyboardListener;

import com.sun.jna.Native;
import com.sun.jna.Pointer;
import com.sun.jna.platform.win32.User32;
import com.sun.jna.platform.win32.WinDef.HWND;
import com.sun.jna.platform.win32.WinDef.RECT;
import com.sun.jna.platform.win32.WinUser.WNDENUMPROC;

import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;

import mallorcatour.robot.hardwaremanager.KeyboardHookManager;
import mallorcatour.robot.ps.recognizer.PSTableObserver;
import mallorcatour.robot.util.ImageUtils;
import mallorcatour.tools.ExecutorUtils;
import mallorcatour.tools.Log;
import mallorcatour.tools.OnExceptionListener;
import mallorcatour.tools.ThreadUtils;

/**
 *
 * @author Andrew
 */
public class WindowFinderFrame extends javax.swing.JFrame {

    private static long time = 0;
    private PSTableObserver tableObserver;
    private User32 user32 = User32.INSTANCE;
    private int windowIndex = 0;
    private HWND closeWindow = null;

    /** Creates new form WindowFinderFrame */
    public WindowFinderFrame() {
        initComponents();
        KeyboardHookManager.addListener(new NativeKeyboardListener() {

            public boolean keyPressed(NativeKeyboardEvent nke) {
                if (nke.getKeyCode() == KeyEvent.VK_F4) {
                    ExecutorUtils.newSingleThreadExecutor(
                            OnExceptionListener.EMPTY).submit(new Runnable() {

                        public void run() {
                            Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
                            Log.d(d + "");
                            windowIndex = 0;
                            user32.EnumWindows(new WNDENUMPROC() {

                                public boolean callback(HWND windowId, Pointer pntr) {
                                    char[] windowTextC = new char[512];
                                    user32.GetWindowText(windowId, windowTextC, 512);
                                    String windowText = Native.toString(windowTextC);
                                    RECT rectangle = new RECT();
                                    user32.GetWindowRect(windowId, rectangle);
                                    //checking intersection of windows
                                    if (!windowText.isEmpty()
                                            && User32.INSTANCE.IsWindowVisible(windowId)) {
                                        Log.d(windowIndex + " " + windowText + " " + rectangle);
                                        windowIndex++;
                                    }
                                    if (windowText.equals("Компьютер")) {
                                        Log.d("Computer window");
                                        closeWindow = windowId;
                                    }
                                    return true;
                                }
                            }, Pointer.NULL);
                            ThreadUtils.sleep(1000);
                            if (closeWindow != null) {
                                Log.d("To foreground");
                                boolean result = user32.SetForegroundWindow(closeWindow);
                                Log.d("Result: " + result);
                                Log.d("Closing the window");
                                result = user32.CloseWindow(closeWindow);
                                Log.d("Result: " + result);
                            }
                        }
                    });
                    return false;
                } else if (nke.getKeyCode() == KeyEvent.VK_F5) {
                    BufferedImage screen = ImageUtils.getScreenCapture(new Rectangle(-12, -12, 500, 600));
                    ImageUtils.toFile(screen, "screen.png", false);
                    return false;
                } else if (nke.getKeyCode() == KeyEvent.VK_F6) {
                    return false;
                }
                return true;
            }

            public boolean keyReleased(NativeKeyboardEvent nke) {
                return true;
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new WindowFinderFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
