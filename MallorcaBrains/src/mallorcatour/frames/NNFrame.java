/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PSMFrame.java
 *
 * Created on 15.10.2012, 18:14:26
 */
package mallorcatour.frames;


import java.io.BufferedReader;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;

import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import mallorcatour.core.game.advice.Advice;
import mallorcatour.core.game.advice.SmartAdviceCreator;
import mallorcatour.core.game.situation.LocalSituation;
import mallorcatour.core.game.situation.LocalSituationDistance;
import mallorcatour.core.vector.BaseVector;
import mallorcatour.core.vector.EuclidDistanceMod;
import mallorcatour.core.vector.IVector;
import mallorcatour.core.vector.VectorUtils;
import mallorcatour.interfaces.IRandomizer;
import mallorcatour.neural.core.ILearningExample;
import mallorcatour.neural.core.LearningExample;
import mallorcatour.neural.generator.NNWriter;
import mallorcatour.neural.manager.LEManager;
import mallorcatour.neural.manager.NNManager;
import mallorcatour.util.DoubleUtils;
import mallorcatour.util.Log;
import mallorcatour.util.MyFileWriter;
import mallorcatour.util.ReaderUtils;
import mallorcatour.util.StringUtils;
import mallorcatour.util.UniformRandomizer;
import mallorcatour.util.frames.FrameUtils;

import org.neuroph.core.NeuralNetwork;
import org.neuroph.nnet.Kohonen;
import org.neuroph.nnet.MultiLayerPerceptron;
import org.neuroph.nnet.learning.KohonenLearning;
import org.neuroph.nnet.learning.MomentumBackpropagation;

/**
 *
 * @author Andrew
 */
public class NNFrame extends javax.swing.JFrame {

    private boolean isKohonenLearningProcessed = false;
    private boolean forInputs = true;
    private Kohonen kohonenNN;
    private MultiLayerPerceptron multiLayerPerceptron;
    private LearningExample selectedExample;
    private List<ILearningExample<?,?>> learningExamples, controlExamples, sameExamples;
    private DefaultListModel learningExamplesModel, controlExamplesModel,
            clusterNumberModel, sameExamplesModel;
    private DefaultTableModel clusterTableModel;
    private final dou–¥ble PERCENT_OF_CONTROL_EXAMPLES = 0.2;
    //for Kohonen SOM
    private int countOfCells;
//    private Dimension frameSize = new Dimension(900, 670);
    private List<LearningExample> allExamples;

    /** Creates new form PSMFrame */
    public NNFrame() {
        initComponents();

        clusterNumberModel = new DefaultListModel();
        learningExamplesModel = new DefaultListModel();
        controlExamplesModel = new DefaultListModel();
        sameExamplesModel = new DefaultListModel();

        learningExamplesList.setModel(learningExamplesModel);
        controlExamplesList.setModel(controlExamplesModel);
        clusterNumberList.setModel(clusterNumberModel);
        sameExamplesList.setModel(sameExamplesModel);
        enableButtons(false);

        clusterTableModel = new DefaultTableModel(new Object[]{"Vector", "Distance"}, 0);
        clusterTable.setModel(clusterTableModel);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        rawResultField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        passiveResultField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        aggressiveResultField = new javax.swing.JTextField();
        foldResultField = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        exampleErrorField = new javax.swing.JTextField();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        mlpInfoLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        kohonenLearningButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        cellNumberField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        infoKohonenLabel = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        clusterTable = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        clusterNumberList = new javax.swing.JList();
        jPanel6 = new javax.swing.JPanel();
        clusterVolumeField = new javax.swing.JTextField();
        averageOutputField = new javax.swing.JTextField();
        averageDistanceField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        iterationCountField = new javax.swing.JTextField();
        learningRateField = new javax.swing.JTextField();
        canvas1 = new java.awt.Canvas();
        jPanel8 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        sameExamplesSizeField = new javax.swing.JTextField();
        averageOutputFromSameField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        similarityField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        maxDistanceSlider = new javax.swing.JSlider();
        jButton1 = new javax.swing.JButton();
        maxDistanceField = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        avOutputErrorField = new javax.swing.JTextField();
        jScrollPane6 = new javax.swing.JScrollPane();
        sameExamplesList = new javax.swing.JList();
        jButton17 = new javax.swing.JButton();
        sortingColumnsSameField = new javax.swing.JTextField();
        jButton18 = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jButton16 = new javax.swing.JButton();
        averageOutputFromAllField = new javax.swing.JTextField();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        learningExamplesPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        learningExamplesList = new javax.swing.JList();
        controlExamplesPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        controlExamplesList = new javax.swing.JList();
        jPanel9 = new javax.swing.JPanel();
        createdExampleField = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        strengthSlider = new javax.swing.JSlider();
        strengthField = new javax.swing.JTextField();
        examplesInfoLabel = new javax.swing.JLabel();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel10 = new javax.swing.JPanel();
        jButton12 = new javax.swing.JButton();
        sortingColumnsField = new javax.swing.JTextField();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        savedColumnsField = new javax.swing.JTextField();
        jButton15 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenuItem18 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem22 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 900, 600));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jButton5.setText("Error on example");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton2.setText("Calculate to raw");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Fold");

        passiveResultField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passiveResultFieldActionPerformed(evt);
            }
        });

        jLabel3.setText("Aggressive");

        jLabel2.setText("Passive");

        aggressiveResultField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aggressiveResultFieldActionPerformed(evt);
            }
        });

        foldResultField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foldResultFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(57, 57, 57))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(passiveResultField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                    .addComponent(aggressiveResultField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(foldResultField))
                .addGap(21, 21, 21))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(foldResultField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passiveResultField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(aggressiveResultField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jButton4.setText("Calculate to poker representation");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton10.setText("Start learning");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("Stop");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mlpInfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 895, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(47, 47, 47)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rawResultField, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton5)
                        .addGap(18, 18, 18)
                        .addComponent(exampleErrorField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(jButton10)
                        .addGap(18, 18, 18)
                        .addComponent(jButton11)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mlpInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exampleErrorField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5)
                    .addComponent(jButton10)
                    .addComponent(jButton11))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rawResultField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(158, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Multi-Layer perceptron", jPanel2);

        kohonenLearningButton.setText("Start learning");
        kohonenLearningButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kohonenLearningButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Number of cell:");

        jButton8.setText("Calculate example");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton8))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(cellNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(10, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jButton8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cellNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        clusterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Vector", "Distance to cell"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(clusterTable);

        clusterNumberList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        clusterNumberList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                clusterNumberListValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(clusterNumberList);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 649, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabel10.setText("Average distance to cell:");

        jLabel11.setText("Av. output:");

        jLabel7.setText("Cluster size:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(averageDistanceField, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(clusterVolumeField, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(averageOutputField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clusterVolumeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(7, 7, 7)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(averageDistanceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(averageOutputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addContainerGap())
        );

        iterationCountField.setText("100");

        learningRateField.setText("0.5");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(iterationCountField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(learningRateField, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE))
                            .addComponent(kohonenLearningButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(infoKohonenLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 856, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(267, 267, 267)
                        .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(infoKohonenLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(kohonenLearningButton)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(learningRateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(iterationCountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(119, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Kohonen(inputs)", jPanel3);

        jPanel8.setPreferredSize(new java.awt.Dimension(915, 600));

        jPanel7.setMaximumSize(new java.awt.Dimension(800, 600));
        jPanel7.setPreferredSize(new java.awt.Dimension(971, 600));

        jLabel4.setText("Size:");

        jLabel5.setText("Av. output:");

        jButton9.setText("Test similarity");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel8.setText("Error");

        maxDistanceSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxDistanceSliderStateChanged(evt);
            }
        });

        jButton1.setText("Find");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton7.setText("Find mod");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(maxDistanceField, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(127, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                .addGap(40, 40, 40))
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                .addGap(40, 40, 40))
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(maxDistanceSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                .addGap(40, 40, 40))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton7)
                .addGap(18, 18, 18)
                .addComponent(maxDistanceSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(maxDistanceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        sameExamplesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane6.setViewportView(sameExamplesList);

        jButton17.setText("Sort by columns");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jButton18.setText("Reorder");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sameExamplesSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(averageOutputFromSameField, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(avOutputErrorField, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel8)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jButton9)
                        .addGap(18, 18, 18)
                        .addComponent(similarityField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(sortingColumnsSameField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton17, javax.swing.GroupLayout.Alignment.LEADING))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jButton18)))
                .addGap(110, 110, 110))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jButton17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sortingColumnsSameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton18)
                        .addContainerGap())
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel7Layout.createSequentialGroup()
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap())
                        .addGroup(jPanel7Layout.createSequentialGroup()
                            .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(57, 57, 57)
                            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(sameExamplesSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(averageOutputFromSameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel8)
                                .addComponent(avOutputErrorField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jButton9)
                                .addComponent(similarityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(126, 126, 126)))))
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 888, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Analyse by same", jPanel8);

        jButton16.setText("Average output");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(averageOutputFromAllField, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                        .addGap(798, 798, 798))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jButton16)
                        .addContainerGap(796, Short.MAX_VALUE))))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jButton16)
                .addGap(18, 18, 18)
                .addComponent(averageOutputFromAllField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(327, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Common analysis", jPanel14);

        learningExamplesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        learningExamplesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                learningExamplesListMouseClicked(evt);
            }
        });
        learningExamplesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                learningExamplesListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(learningExamplesList);

        javax.swing.GroupLayout learningExamplesPanelLayout = new javax.swing.GroupLayout(learningExamplesPanel);
        learningExamplesPanel.setLayout(learningExamplesPanelLayout);
        learningExamplesPanelLayout.setHorizontalGroup(
            learningExamplesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(learningExamplesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
                .addContainerGap())
        );
        learningExamplesPanelLayout.setVerticalGroup(
            learningExamplesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(learningExamplesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Learning examples", learningExamplesPanel);

        controlExamplesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        controlExamplesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                controlExamplesListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(controlExamplesList);

        javax.swing.GroupLayout controlExamplesPanelLayout = new javax.swing.GroupLayout(controlExamplesPanel);
        controlExamplesPanel.setLayout(controlExamplesPanelLayout);
        controlExamplesPanelLayout.setHorizontalGroup(
            controlExamplesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlExamplesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
                .addContainerGap())
        );
        controlExamplesPanelLayout.setVerticalGroup(
            controlExamplesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlExamplesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Control examples", controlExamplesPanel);

        jButton3.setText("Create");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton6.setText("Clear");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        strengthSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                strengthSliderStateChanged(evt);
            }
        });
        strengthSlider.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                strengthSliderCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(createdExampleField, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(strengthSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(strengthField, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createdExampleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton6))
                .addGap(18, 18, 18)
                .addComponent(strengthSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(strengthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Create example", jPanel9);

        jButton12.setText("Sort by columns");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setText("Shuffle");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setText("Reorder");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(sortingColumnsField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(30, 30, 30)
                        .addComponent(jButton13))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jButton14)))
                .addContainerGap(254, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton12)
                    .addComponent(jButton13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sortingColumnsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton14)
                .addContainerGap(77, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Sort examples", jPanel10);

        jButton15.setText("Save...");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(savedColumnsField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(280, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(savedColumnsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton15)
                .addContainerGap(111, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Save examples", jPanel12);

        jMenu2.setText("Examples");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenuItem1.setText("Add examples...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem4.setText("Save...");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Clear");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem3.setText("Add timeline...");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenu1.setText("Add poker examples");

        jMenuItem2.setText("Preflop...");
        jMenu1.add(jMenuItem2);

        jMenuItem12.setText("Flop...");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem12);

        jMenuItem15.setText("Turn...");
        jMenu1.add(jMenuItem15);

        jMenuItem16.setText("River...");
        jMenu1.add(jMenuItem16);

        jMenu2.add(jMenu1);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Kohonen");

        jMenuItem13.setText("Create for inputs");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem13);

        jMenuItem14.setText("Create for outputs");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem14);

        jMenuItem17.setText("Load..");
        jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem17ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem17);

        jMenuItem18.setText("Save..");
        jMenuItem18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem18ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem18);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("MLP");
        jMenu5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu5ActionPerformed(evt);
            }
        });

        jMenuItem8.setText("New 1-layer perceptron...");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem8);

        jMenuItem20.setText("New 2-layer perceptron..");
        jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem20ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem20);

        jMenuItem21.setText("New 3-layer perceptron..");
        jMenuItem21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem21ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem21);

        jMenuItem6.setText("Load...");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem6);

        jMenuItem7.setText("Save...");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem7);

        jMenuItem10.setText("Error on learning");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem10);

        jMenuItem11.setText("Error on control");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem11);

        jMenuItem22.setText("Create error sample");
        jMenuItem22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem22ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem22);

        jMenuItem9.setText("Save weights as .java...");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem9);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 920, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(examplesInfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 920, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTabbedPane3, 0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(examplesInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTabbedPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void enableButtons(boolean enable) {
        //implement for menu items
    }
    private void learningExamplesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_learningExamplesListValueChanged
        controlExamplesList.clearSelection();
        selectedExample = (LearningExample) learningExamplesList.getSelectedValue();
    }//GEN-LAST:event_learningExamplesListValueChanged

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void processNewExamples(List<LearningExample> newExamples) {
        if (allExamples == null) {
            allExamples = new ArrayList<LearningExample>();
        }
        allExamples.addAll(newExamples);
        if (controlExamples == null) {
            controlExamples = new ArrayList<>();
        }
        if (learningExamples == null) {
            learningExamples = new ArrayList<>();
        }
        if (sameExamples == null) {
            sameExamples = new ArrayList<>();
        }
        sameExamples.clear();
        Random gen = new Random(System.nanoTime());
        for (LearningExample example : newExamples) {
            double random = gen.nextDouble();
            if (random < PERCENT_OF_CONTROL_EXAMPLES) {
                controlExamples.add(example);
                controlExamplesModel.addElement(example);
            } else {
                learningExamples.add(example);
                learningExamplesModel.addElement(example);
            }
        }
    }

    private void examplesLoaded(String filename) {

        int input = learningExamples.get(0).getInputDimension();
        examplesInfoLabel.setText("Examples has loaded. Count: " + allExamples.size()
                + ". File: " + filename
                + ". Input dimension: " + input
                + ". Output dimension: " + learningExamples.get(0).getOutputDimension());
        StringBuilder columns = new StringBuilder();
        for (int column = 0; column < input; column++) {
            columns.append(column);
            columns.append(",");
        }
        columns.delete(columns.length() - 1, columns.length());
        savedColumnsField.setText(columns.toString());
    }
    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void controlExamplesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_controlExamplesListValueChanged
        learningExamplesList.clearSelection();
        selectedExample = (LearningExample) controlExamplesList.getSelectedValue();
    }//GEN-LAST:event_controlExamplesListValueChanged

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        if (selectedExample == null) {
            return;
        }
        int cluster = NNManager.getCluster(kohonenNN,
                (forInputs ? selectedExample.getInput() : selectedExample.getOutput()));
        cellNumberField.setText(String.valueOf(cluster));
}//GEN-LAST:event_jButton8ActionPerformed

    private void kohonenLearningButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kohonenLearningButtonActionPerformed
        if (isKohonenLearningProcessed) {
            kohonenNN.stopLearning();
            kohonenLearningButton.setText("Start learning");
            isKohonenLearningProcessed = false;
        } else {
            isKohonenLearningProcessed = true;
            int inputSize = learningExamples.get(0).getInputDimension();
            int outputSize = learningExamples.get(0).getOutputDimension();
            int kohonenNNSize = kohonenNN.getInputNeurons().length;
            int iterationCount = Integer.parseInt(iterationCountField.getText());
            double learningRate = Double.parseDouble(learningRateField.getText());
            KohonenLearning learning = new KohonenLearning();
            if (kohonenNNSize == inputSize) {
                kohonenNN.learnInNewThread(LEManager.createTrainingSet(learningExamples),
                        learning);
            } else if (kohonenNNSize == outputSize) {
                throw new RuntimeException();
//            kohonenNN.learn(NNManager.createTrainingSetForOutput(
//                    learningExamples, true), new KohonenLearningGTMod(100));
            }
            kohonenLearningButton.setText("Stop");
        }
}//GEN-LAST:event_kohonenLearningButtonActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        calculatePerceptronOutput();
}//GEN-LAST:event_jButton4ActionPerformed

    private void calculatePerceptronOutput() {
        LearningExample example = selectedExample;
        if (example == null) {
            return;
        }
        multiLayerPerceptron.setInput(LEManager.createInputArray(example));
        multiLayerPerceptron.calculate();
        Advice advice = Advice.create(multiLayerPerceptron.getOutput());
        foldResultField.setText(advice.getFoldPercent() + "%");
        passiveResultField.setText(advice.getPassivePercent() + "%");
        aggressiveResultField.setText(advice.getAggressivePercent() + "%");

    }
    private void foldResultFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foldResultFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_foldResultFieldActionPerformed

    private void aggressiveResultFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aggressiveResultFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_aggressiveResultFieldActionPerformed

    private void passiveResultFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passiveResultFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_passiveResultFieldActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (selectedExample == null) {
            return;
        }
        multiLayerPerceptron.setInput(LEManager.createInputArray(selectedExample));
        multiLayerPerceptron.calculate();
        rawResultField.setText(Arrays.toString(multiLayerPerceptron.getOutput()));
}//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        LearningExample example = selectedExample;
        if (example == null) {
            return;
        }
        multiLayerPerceptron.setInput(LEManager.createInputArray(example));
        multiLayerPerceptron.calculate();
        Advice advice = Advice.create(multiLayerPerceptron.getOutput());
        IVector desiredOutput = example.getOutput();
        if (desiredOutput == null) {
            exampleErrorField.setText("Have no info");
        } else {
            double foldError = Math.abs(advice.getFold()
                    - desiredOutput.getValues().get(0).doubleValue());
            double passiveError = Math.abs(advice.getPassive()
                    - desiredOutput.getValues().get(1).doubleValue());
            double aggressiveError = Math.abs(advice.getAggressive()
                    - desiredOutput.getValues().get(2).doubleValue());
            double error = Math.sqrt(Math.pow(foldError, 2)
                    + Math.pow(aggressiveError, 2) + Math.pow(passiveError, 2));
            exampleErrorField.setText(String.valueOf((double) Math.round(error * 100) / 100));
        }
}//GEN-LAST:event_jButton5ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        countOfCells = Integer.parseInt(JOptionPane.showInputDialog("Count of cells in map layer"));
        forInputs = true;
        kohonenNN = new Kohonen(learningExamples.get(0).getInputDimension(),
                countOfCells);
        clusterNumberModel.clear();
        for (int i = 0; i < countOfCells; i++) {
            clusterNumberModel.addElement(i);
        }
        kohonenLoaded();
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        countOfCells = Integer.parseInt(JOptionPane.showInputDialog("Count of cells in map layer"));
        forInputs = false;
        kohonenNN = new Kohonen(learningExamples.get(0).getOutputDimension(),
                countOfCells);
        clusterNumberModel.clear();
        for (int i = 0; i < countOfCells; i++) {
            clusterNumberModel.addElement(i);
        }
        kohonenLoaded();
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed
        String path = FrameUtils.openFileChooser(this, "./");
        if (path == null) {
            return;
        }
        kohonenNN = (Kohonen) NeuralNetwork.load(path);
        kohonenLoaded();
    }//GEN-LAST:event_jMenuItem17ActionPerformed

    private void jMenuItem18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem18ActionPerformed
        String path = FrameUtils.openFileChooser(this);
        if (path == null) {
            return;
        }
        kohonenNN.save(path);
    }//GEN-LAST:event_jMenuItem18ActionPerformed

    private void clusterNumberListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_clusterNumberListValueChanged
        clusterTableModel.setRowCount(0);
        double foldSum = 0, passiveSum = 0, aggressiveSum = 0;
        List<IVector> clusterVectors = new ArrayList<IVector>();
        double distanceSum = 0;
		double distance;
		for (ILearningExample<?, ?> example : learningExamples) {
            IVector vector = forInputs ? example.getInput() : example.getOutput();
            int cluster = NNManager.getCluster(kohonenNN, vector);
            if (cluster == clusterNumberList.getSelectedIndex()) {
                List<Number> output = example.getOutput().getValues();
                foldSum += output.get(0).doubleValue();
                passiveSum += output.get(1).doubleValue();
                aggressiveSum += output.get(2).doubleValue();

                clusterVectors.add(vector);
                distance = NNManager.getDistance(kohonenNN, vector, cluster, 2);
                distanceSum += distance;
                clusterTableModel.addRow(new Object[]{example, distance});
            }
        }
        int size = clusterTableModel.getRowCount();
        //calculating average output
        foldSum /= size;
        passiveSum /= size;
        aggressiveSum /= size;
        foldSum = DoubleUtils.digitsAfterComma(foldSum, 2);
        passiveSum = DoubleUtils.digitsAfterComma(passiveSum, 2);
        aggressiveSum = DoubleUtils.digitsAfterComma(aggressiveSum, 2);
        //
        distanceSum /= size;
        distanceSum = DoubleUtils.digitsAfterComma(distanceSum, 2);
        averageOutputField.setText(foldSum + ", " + passiveSum + ", " + aggressiveSum);
        averageDistanceField.setText(String.valueOf(distanceSum));
        clusterVolumeField.setText(String.valueOf(size));
    }//GEN-LAST:event_clusterNumberListValueChanged

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        long start = System.currentTimeMillis();
        multiLayerPerceptron.learnInNewThread(
                LEManager.createTrainingSet(learningExamples),
                new MomentumBackpropagation());
        Log.d("Time: " + (System.currentTimeMillis() - start));
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        multiLayerPerceptron.stopLearning();
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        selectedExample = new LearningExample(BaseVector.valueOf(
                createdExampleField.getText()), null);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void learningExamplesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_learningExamplesListMouseClicked
        JList list = (JList) evt.getSource();
        if (evt.getClickCount() == 2) {
            int index = list.locationToIndex(evt.getPoint());
            LearningExample clickedExample = (LearningExample) learningExamplesModel.getElementAt(index);
            createdExampleField.setText(VectorUtils.toString(clickedExample.getInput()));
        }
    }//GEN-LAST:event_learningExamplesListMouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        createdExampleField.setText("");
        selectedExample = null;
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        String path = FrameUtils.openFileChooser(this, "./");
        if (path == null) {
            return;
        }
        List<LearningExample> newExamples = LEManager.readLearningExamples(path);

        processNewExamples(newExamples);
        examplesLoaded(new File(path).getName());
        if (multiLayerPerceptron != null) {
            enableButtons(true);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        String columns = sortingColumnsField.getText();
        Collections.sort(learningExamples, LearningExample.inputComparator(
                StringUtils.parseIntArray(columns, ",")));
        learningExamplesModel.clear();
        for (ILearningExample example : learningExamples) {
            learningExamplesModel.addElement(example);
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        Collections.shuffle(learningExamples);
        learningExamplesModel.clear();
        for (ILearningExample example : learningExamples) {
            learningExamplesModel.addElement(example);
        }
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        learningExamplesModel.clear();
        Collections.reverse(learningExamples);
        for (ILearningExample example : learningExamples) {
            learningExamplesModel.addElement(example);
        }
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        String path = FrameUtils.openFileChooser(this, "./");
        if (path == null) {
            return;
        }
        LEManager.toFile(path, allExamples);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem20ActionPerformed
        String input = JOptionPane.showInputDialog(this,
                "Count of input parameters");
        if (input == null) {
            return;
        }
        String hidden = JOptionPane.showInputDialog(this,
                "Count of hidden neurons");
        if (hidden == null) {
            return;
        }
        String output = JOptionPane.showInputDialog(this,
                "Count of output parameters");
        if (output == null) {
            return;
        }
        multiLayerPerceptron = new MultiLayerPerceptron(Integer.parseInt(input),
                Integer.parseInt(hidden), Integer.parseInt(output));
    }//GEN-LAST:event_jMenuItem20ActionPerformed

    private void jMenuItem21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem21ActionPerformed
        String input = JOptionPane.showInputDialog(this,
                "Count of input parameters");
        if (input == null) {
            return;
        }
        String hidden1 = JOptionPane.showInputDialog(this,
                "Count of hidden neurons in first hidden layer");
        if (hidden1 == null) {
            return;
        }
        String hidden2 = JOptionPane.showInputDialog(this,
                "Count of hidden neurons in second hidden layer");
        if (hidden2 == null) {
            return;
        }
        String output = JOptionPane.showInputDialog(this,
                "Count of output parameters");
        if (output == null) {
            return;
        }
        multiLayerPerceptron = new MultiLayerPerceptron(Integer.parseInt(input),
                Integer.parseInt(hidden1), Integer.parseInt(hidden2),
                Integer.parseInt(output));
    }//GEN-LAST:event_jMenuItem21ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        double error = NNManager.errorOnExamples(multiLayerPerceptron,
                learningExamples, new SmartAdviceCreator(true));
        JOptionPane.showMessageDialog(this,
                "Error on learning examples = " + error);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        double error = NNManager.errorOnExamples(multiLayerPerceptron,
                controlExamples, new SmartAdviceCreator(true));
        JOptionPane.showMessageDialog(this,
                "Error on control examples = " + error);
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem22ActionPerformed
        double sectionSize = 0.2;
        double maxError = 1.4;
        int[] sample = NNManager.createErrorSample(multiLayerPerceptron,
                allExamples, sectionSize, maxError, new SmartAdviceCreator(false));
        String info = "";
        for (int i = 0; i < sample.length; i++) {
            info += "Count of examples with error (" + (i * sectionSize) + " - "
                    + (i + 1) * sectionSize + ") " + sample[i] + "\n";
        }
        JOptionPane.showMessageDialog(this, info);
    }//GEN-LAST:event_jMenuItem22ActionPerformed

    private void jMenu5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu5ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        allExamples.clear();
        learningExamples.clear();
        controlExamples.clear();
        learningExamplesModel.clear();
        controlExamplesModel.clear();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        String path = FrameUtils.openFileChooser(this, "./");
        if (path == null) {
            return;
        }
        multiLayerPerceptron = (MultiLayerPerceptron) NeuralNetwork.load(path);
        if (learningExamples != null) {
            enableButtons(true);
        }
        int layerCount = multiLayerPerceptron.getLayersCount();
        int input = multiLayerPerceptron.getLayerAt(0).getNeuronsCount();
        int output = multiLayerPerceptron.getLayerAt(layerCount - 1).getNeuronsCount();
        String filename = new File(path).getName();
        String infoText = "Multi-Layer perceptron loaded. Input dimension: "
                + input + ". Output dimension: " + output + ". File: " + filename;
        mlpInfoLabel.setText(infoText);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        String path = FrameUtils.openFileChooser(this);
        multiLayerPerceptron.save(path);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        String path = FrameUtils.openFileChooser(jLabel1);
        if (path == null) {
            return;
        }
        learningExamples = new ArrayList<>();
        int input = Integer.parseInt(JOptionPane.showInputDialog("Input size"));
        BufferedReader reader = ReaderUtils.initReader(path);
        String buffer = ReaderUtils.readLine(reader);

        String[] stringValues = buffer.split(",");
        double[] values = new double[stringValues.length];
        int i = 0;
        for (String value : stringValues) {
            values[i++] = Double.parseDouble(value);
        }
        for (int j = 0; j < values.length - input; j++) {
            //input
            List<Number> inputValues = new ArrayList<Number>();
            for (int k = j; k < j + input; k++) {
                inputValues.add(values[k]);
            }
            BaseVector inputVector = new BaseVector(inputValues);
            //output
            List<Number> outputValues = new ArrayList<Number>();
            outputValues.add(values[j + input]);
            BaseVector outputVector = new BaseVector(outputValues);
            LearningExample example = new LearningExample(inputVector, outputVector);
            learningExamples.add(example);
        }
        Log.d("Count of examples: " + learningExamples.size());
        learningExamplesModel.clear();
        for (ILearningExample example : learningExamples) {
            learningExamplesModel.addElement(example);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        String path = FrameUtils.openFileChooser(this, "./");
        if (path == null) {
            return;
        }
        String[] columnsStr = savedColumnsField.getText().split(",");
        int[] columnsInt = new int[columnsStr.length];
        int i = 0;
        for (String str : columnsStr) {
            columnsInt[i++] = Integer.parseInt(str);
        }
        MyFileWriter filewriter = MyFileWriter.prepareForWriting(path, true);
        final List<Number> current = new ArrayList<Number>();
        for (LearningExample example : allExamples) {
            current.clear();
            List<Number> values = example.getInput().getValues();
            for (int column : columnsInt) {
                current.add(values.get(column));
            }
            LEManager.toFile(filewriter, new BaseVector(current), example.getOutput());
        }
        filewriter.endWriting();
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        double[] averageOutput = LEManager.getAverageOutput(allExamples);
        averageOutputFromAllField.setText(Arrays.toString(averageOutput));
        for (int i = 0; i < averageOutput.length; i++) {
            averageOutput[i] = DoubleUtils.digitsAfterComma(averageOutput[i], 2);
        }
        averageOutputFromAllField.setText(Arrays.toString(averageOutput));
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        String input = JOptionPane.showInputDialog(this,
                "Count of input parameters");
        if (input == null) {
            return;
        }
        String output = JOptionPane.showInputDialog(this,
                "Count of output parameters");
        if (output == null) {
            return;
        }
        multiLayerPerceptron = new MultiLayerPerceptron(Integer.parseInt(input),
                Integer.parseInt(output));
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void getSimilarExamplesByColumns(LearningExample testedExample,
            List<LearningExample> examplesWithSimilar,
            double maxDistanceForSimilarity) {
        int dimension = examplesWithSimilar.get(0).getInputDimension();
        String defaultInput = "";
        for (int i = 0; i < dimension; i++) {
            defaultInput += "" + i + ",";
        }
        defaultInput = defaultInput.substring(0, defaultInput.length() - 1);
        String inputColumns =
                JOptionPane.showInputDialog(this, "Columns for calculating distance", defaultInput);
        if (inputColumns == null) {
            return;
        }
        EuclidDistanceMod distance = new EuclidDistanceMod(StringUtils.parseIntArray(inputColumns, ","));
        double error = 0;
        int count = 0;
        sameExamplesModel.clear();
        sameExamples.clear();
        //form test sample of examples
        for (LearningExample example : examplesWithSimilar) {
            if (testedExample == example) {
                continue;
            }
            if (distance.getDistance(testedExample.getInput(),
                    example.getInput()) < maxDistanceForSimilarity) {
                sameExamples.add(example);
                count++;
                sameExamplesModel.addElement(example);
            }
        }
        double[] averageOutput = LEManager.getAverageOutput(sameExamples);
        for (int i = 0; i < averageOutput.length; i++) {
            averageOutput[i] = DoubleUtils.digitsAfterComma(averageOutput[i], 2);
        }
        if (selectedExample.getOutput() != null) {
            error = VectorUtils.getDistance(testedExample.getOutput(),
                    new BaseVector(averageOutput));
            error = DoubleUtils.digitsAfterComma(error, 2);
            avOutputErrorField.setText(String.valueOf(error));
        } else {
            avOutputErrorField.setText("No info");
        }
        averageOutputFromSameField.setText(Arrays.toString(averageOutput));
        sameExamplesSizeField.setText(String.valueOf(count));
    }

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        String path = FrameUtils.openFileChooser(this, "./");
		if (path == null) {
			return;
		}
		MyFileWriter writer = MyFileWriter.prepareForWriting(path, false);
		NNWriter.weightsToJavaClass(writer, multiLayerPerceptron, "Flop");
		writer.endWriting();
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        if (selectedExample == null) {
            return;
        }
        sameExamplesModel.clear();
        double maxDistanceForSimilarity = (double) maxDistanceSlider.getValue() / 100;
        getSimilarExamplesByColumns(selectedExample, allExamples, maxDistanceForSimilarity);
}//GEN-LAST:event_jButton7ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (selectedExample == null) {
            return;
        }
        sameExamplesModel.clear();
        int count = 0;
        double[] averageOutput = new double[allExamples.get(0).getOutputDimension()];
        double maxDistanceForSimilarity = (double) maxDistanceSlider.getValue() / 100;
        for (LearningExample example : allExamples) {
            if (selectedExample == example) {
                continue;
            }
            if (selectedExample.getInput().getValues().size() == 10) {
                LocalSituation selectedSituation = new LocalSituation(selectedExample.getInput(), LocalSituation.FLOP);
                LocalSituation currentSituation = new LocalSituation(example.getInput(), LocalSituation.FLOP);
                if (new LocalSituationDistance().getDistance(selectedSituation,
                        currentSituation) < maxDistanceForSimilarity) {
                    List<Number> output = example.getOutput().getValues();
                    int i = 0;
                    for (Number value : output) {
                        averageOutput[i++] += value.doubleValue();
                    }
                    sameExamplesModel.addElement(example);
                    count++;
                }
            } else if (VectorUtils.getDistance(selectedExample.getInput(),
                    example.getInput()) < maxDistanceForSimilarity) {
                List<Number> output = example.getOutput().getValues();
                int i = 0;
                for (Number value : output) {
                    averageOutput[i++] += value.doubleValue();
                }
                sameExamplesModel.addElement(example);
                count++;
            }
        }
        //calculating average output
        int size = sameExamplesModel.size();
        for (int i = 0; i < averageOutput.length; i++) {
            averageOutput[i] /= size;
            averageOutput[i] = DoubleUtils.digitsAfterComma(averageOutput[i], 2);
        }
        if (selectedExample.getOutput() != null) {
            double error = VectorUtils.getDistance(selectedExample.getOutput(),
                    new BaseVector(averageOutput));
            error = DoubleUtils.digitsAfterComma(error, 2);
            avOutputErrorField.setText(String.valueOf(error));
        } else {
            avOutputErrorField.setText("No info");
        }
        averageOutputFromSameField.setText(Arrays.toString(averageOutput));
        sameExamplesSizeField.setText(String.valueOf(count));
}//GEN-LAST:event_jButton1ActionPerformed

    private void maxDistanceSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxDistanceSliderStateChanged
        maxDistanceField.setText(String.valueOf((double) maxDistanceSlider.getValue() / 100));
}//GEN-LAST:event_maxDistanceSliderStateChanged

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        double maxDistanceForSimilarity = 0.1;
        int neededCount = 4;
        int allCount = 0;
        sameExamplesModel.clear();
        //form test sample of examples
        int testCount = 100;
        int i = 0;
        IRandomizer randomizer = new UniformRandomizer();
        List<LearningExample> testExamples = new ArrayList<LearningExample>();
        while (i < testCount) {
            int random = (int) randomizer.getRandom(0, allExamples.size());
            LearningExample current = allExamples.get(random);
            if (!testExamples.contains(current)) {
                testExamples.add(current);
                i++;
            }
        }
        //get non similar examples
        for (LearningExample example1 : testExamples) {
            int count = 0;
            for (LearningExample example : allExamples) {
                if (example1 == example) {
                    continue;
                }
                if (VectorUtils.getDistance(example1.getInput(), example.getInput())
                        < maxDistanceForSimilarity) {
                    count++;
                }
            }
            if (count >= neededCount) {
                allCount++;
            } else {
                sameExamplesModel.addElement(example1);
            }
        }
        similarityField.setText(String.valueOf(DoubleUtils.digitsAfterComma(
                (double) allCount / testCount, 2)));
}//GEN-LAST:event_jButton9ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        String columns = sortingColumnsSameField.getText();
        Collections.sort(sameExamples, LearningExample.inputComparator(
                StringUtils.parseIntArray(columns, ",")));
        sameExamplesModel.clear();
        for (ILearningExample example : sameExamples) {
            sameExamplesModel.addElement(example);
        }
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton18ActionPerformed

    private void strengthSliderCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_strengthSliderCaretPositionChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_strengthSliderCaretPositionChanged

    private void strengthSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_strengthSliderStateChanged
        strengthField.setText((double) strengthSlider.getValue() / 100 + "");
        if (createdExampleField.getText().isEmpty()) {
            return;
        }
        int firstComma = createdExampleField.getText().indexOf(",");
        String newCreatedExample = strengthField.getText() + ","
                + createdExampleField.getText().substring(firstComma + 1);
        createdExampleField.setText(newCreatedExample);
        selectedExample = new LearningExample(BaseVector.valueOf(newCreatedExample));
        calculatePerceptronOutput();
    }//GEN-LAST:event_strengthSliderStateChanged

    private void kohonenLoaded() {
        infoKohonenLabel.setText("Kohonen NN has loaded. Dimension of input vector: "
                + kohonenNN.getInputNeurons().length + ". Count of map neurons: "
                + kohonenNN.getOutputNeurons().length);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new NNFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField aggressiveResultField;
    private javax.swing.JTextField avOutputErrorField;
    private javax.swing.JTextField averageDistanceField;
    private javax.swing.JTextField averageOutputField;
    private javax.swing.JTextField averageOutputFromAllField;
    private javax.swing.JTextField averageOutputFromSameField;
    private java.awt.Canvas canvas1;
    private javax.swing.JTextField cellNumberField;
    private javax.swing.JList clusterNumberList;
    private javax.swing.JTable clusterTable;
    private javax.swing.JTextField clusterVolumeField;
    private javax.swing.JList controlExamplesList;
    private javax.swing.JPanel controlExamplesPanel;
    private javax.swing.JTextField createdExampleField;
    private javax.swing.JTextField exampleErrorField;
    private javax.swing.JLabel examplesInfoLabel;
    private javax.swing.JTextField foldResultField;
    private javax.swing.JLabel infoKohonenLabel;
    private javax.swing.JTextField iterationCountField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem18;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JButton kohonenLearningButton;
    private javax.swing.JList learningExamplesList;
    private javax.swing.JPanel learningExamplesPanel;
    private javax.swing.JTextField learningRateField;
    private javax.swing.JTextField maxDistanceField;
    private javax.swing.JSlider maxDistanceSlider;
    private javax.swing.JLabel mlpInfoLabel;
    private javax.swing.JTextField passiveResultField;
    private javax.swing.JTextField rawResultField;
    private javax.swing.JList sameExamplesList;
    private javax.swing.JTextField sameExamplesSizeField;
    private javax.swing.JTextField savedColumnsField;
    private javax.swing.JTextField similarityField;
    private javax.swing.JTextField sortingColumnsField;
    private javax.swing.JTextField sortingColumnsSameField;
    private javax.swing.JTextField strengthField;
    private javax.swing.JSlider strengthSlider;
    // End of variables declaration//GEN-END:variables
}
